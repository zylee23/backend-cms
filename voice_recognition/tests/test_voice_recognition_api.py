"""Tests for the voice recognition API."""

from pprint import pprint
from django.test import TestCase
from django.urls import reverse
from rest_framework.test import APIClient
from rest_framework import status
from users.models import User

VOICE_RECOGNITION_WEB_URL = reverse("Voice Recognition Speech to Text for Web")
VOICE_RECOGNITION_MOBILE_URL = reverse(
    "Voice Recognition Speech to Text for Mobile")


def create_user(email="testuser@example.com", password="testpass123", role=User.Role.ADMIN, is_staff=True):
    """Create and return a user. Returns AdminUser by default."""
    return User.objects.create_user(email=email, password=password, role=role, is_staff=is_staff)


class PublicVoiceRecognitionAPITests(TestCase):
    """Test unauthenticated API requests."""

    def setUp(self):
        self.admin_user = create_user()
        self.client = APIClient()

    def test_auth_required(self):
        """TODO: This test does not work
        Test Auth not required for retriving VoiceRecognitions."""
        res = self.client.post(VOICE_RECOGNITION_WEB_URL)
        # self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)

    def test_stt_mobile(self):
        """Test Speech to Text for Mobile, using base64 encoded string as audio stream."""
        payload = {
            "data": ""
        }
        expected_output = {
            "data": {
                "text": "to day is saturday",
                "words": 4
            }
        }
        res = self.client.post(VOICE_RECOGNITION_MOBILE_URL, payload)
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.assertEqual(res.data, expected_output)


class PrivateVoiceRecognitionAPITests(TestCase):
    """Test authenticated API requests."""

    def setUp(self):
        self.user = create_user()
        self.client = APIClient()
        self.client.force_authenticate(self.user)

    def test_voice_recognition_wav_file_upload(self):
        """
        TODO: This Test doesn't work. Need to find a way to attach custom header to the request.
        Test uploading wave file is successful."""
        file_path = "voice_recognition/tests/media/polite2.wav"
        payload = {
            "file": open(file_path, 'rb')
        }
        CONTENT_DISPOSITION = "Content-Disposition"
        self.client.credentials(
            CONTENT_DISPOSITION="attachment; filename='sound.wav'")
        res = self.client.post(VOICE_RECOGNITION_WEB_URL,
                               payload, content_type="audio/wave")
        # self.assertEqual(res.status_code, status.HTTP_200_OK)
